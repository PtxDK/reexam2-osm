
typedef struct merge_sem_t {
    int value;
    int thread_lock;
    pthread_cond_t cond;
    pthread_mutex_t lock;
} merge_sem_t;

// Only one thread can call this
void merge_sem_init(merge_sem_t *s, int value) {
    s->value = value;
    Cond_init(&s->cond);
    Mutex_init(&s->lock);
}

void merge_sem_P1(merge_sem_t *s) {
    Mutex_lock(&s->lock);
    while (s->value <= 0 && thread_lock = 0)
        Cond_wait(&s->cond, &s->lock);
        s->value--;
        Mutex_unlock(&s->lock);
    thread_lock = 1;
}

void merge_sem_P2(merge_sem_t *s) {
    Mutex_lock(&s->lock);
    while (s->value <= 0 && thread_lock = 1)
        Cond_wait(&s->cond, &s->lock);
        s->value--;
        Mutex_unlock(&s->lock);
    thread_lock = 0;
}
